/** <h1> AVL Experiment Application </h1>
  * <p> 
  * Program to determine the if AVL trees really do balance nodes and provide good performance irrespective of 
  * the order of the data.  Creates  a version of the vaccine.csv data file with X amount of randomisation (where 0<=X<=20 
  * is specified as a command-line parameter).  The randomised data is loaded into an AVL tree and all searched for while 
  * instrumenting the insert-related and search-related comparison operations. 
  * </p>
  * @author Bonga Njamela NJMLUN002
  * @since 24-03-2022
  * @version 1.0
  */

import models.DataArray;
import models.Country;
import avltree.AVLTree;
import java.io.*;
import java.util.*;

public class AVLExperiment{

    private static AVLTree<Country> avltree;
    private static DataArray darr;
    
    public static void main(String[] args) {
        darr = new DataArray("vaccinations.csv");//initialise data array
        avltree = new AVLTree<Country>();//initialise avl tree data structure
        darr.createArray();//load data into array
        String seed = args[0];//randomisation degree
        
        int rand = 0;//integer val of randomisation degree
        
        header();
        if (Integer.parseInt(seed) >= 20) {//highest randomisation degree possible is 20
            seed = "9919";
            rand = Integer.parseInt(seed);
            darr.randomise(rand);//shuffle approximately all the data in the data array
        }
        else {
            rand = Integer.parseInt(seed)*495;//the number of swaps is equal a multiple of 495
            darr.randomise(rand);//shuffle multiple of 495 items in data array
        }

        generateAVL("vaccines" + rand + ".txt");//generate avl tree using randomised data
        searchAVL("vaccines" + rand + ".txt");//search each item in randomised data file in generated AVL
        
        /*
         * Try to create output file for insert-related and search-related comparison items
         */
        try(FileWriter wr = new FileWriter("instrumentation" + rand + ".txt")) {
            wr.write("Number of insertion-related comparison operations: " + avltree.opCount + "\n");
            wr.write("Number of search-related comparison operations: " + avltree.findCount + "\n");
            wr.close();
        }
         catch (FileNotFoundException e) {
            System.out.println("Failed to create file.");//
            e.printStackTrace();
            System.exit(0);
        }
        catch (IOException ioe){
            ioe.printStackTrace();
            System.exit(0);
        }
        
        footer();
    }
   
   /**
     * <p> Generates an AVL tree from the output file containing the randomised data. Creates Country objects containing 
     * the name, date and vaccinations and uses the AVLTree class's recursive insert method to add each Country node. 
     * </p>
     * @see models.DataArray.randomise()
     * @see avltree.AVLTree.insert(dataType d)
     * @param fileName - Of the file with randomised data
     */ 
    public static void generateAVL(String fileName) {
        
        String[] items;
        String name = "";
        String date = "";
        String vax = "";
        Country newCountry;
        
        String line = " ";
        int index = 0;
        
        try (BufferedReader bf = new BufferedReader(new FileReader(new File(fileName)))){
            while(line != null) {
                line = bf.readLine();
                if (line != null) {
                    items = line.split(",");
                    name = items[0];
                    date = items[1];
                    if (items.length == 3) {
                        vax = items[2];
                    }
                    else {
                        vax = "0";
                    }
                    newCountry = new Country(name, date, vax);
                    avltree.insert(newCountry);
                }
            }
            bf.close();
        }
        catch (FileNotFoundException e) {
            System.out.println("File not found");//
            e.printStackTrace();
            System.exit(0);
        }
        catch (IOException ioe){
            ioe.printStackTrace();
            System.exit(0);
        }
    }
    
    /**
      * For searching each data item in a file in an AVL tree data structure by using the find method in the AVLTree class.
      * @param fileName - Of the file with randomised data.
      * @see avltree.AVLTree.find(dataType d)   
      */ 
    public static void searchAVL(String fileName) {
        String[] items;
        String name = "";
        String date = "";
        String vax = "";
        Country newCountry;
        
        String line = " ";
        int index = 0;
        
        try (BufferedReader bf = new BufferedReader(new FileReader(new File(fileName)))){
            while(line != null) {
                line = bf.readLine();
                if (line != null) {
                    items = line.split(",");
                    name = items[0];
                    date = items[1];
                    if (items.length == 3) {
                        vax = items[2];
                    }
                    else {
                        vax = "0";
                    }
                    newCountry = new Country(name, date, vax);
                    avltree.find(newCountry);
                }
            }
            bf.close();
        }
        catch (FileNotFoundException e) {
            System.out.println("File not found");//
            e.printStackTrace();
            System.exit(0);
        }
        catch (IOException ioe){
            ioe.printStackTrace();
            System.exit(0);
        }
    }
    
      /**
      * Prints out top stars and dashes for appearance and application description in header.
      */
    static void header() {
        String star = "*", bar ="-", wspace24 ="                        ", wspace8 = "        ";
      
        for (int b = 0; b < 24*3;b++) {
            System.out.print(bar);
        }
        System.out.println();
        for (int s = 0; s < 24*3;s++) {
            System.out.print(star);
        }
        System.out.println();
        for (int b = 0; b < 24*3;b++) {
            System.out.print(bar);
        }
        System.out.println();
        System.out.println();
        System.out.println(wspace24 + "AVL Experiment" + wspace24);
        System.out.println();
        System.out.println(wspace8 + "Experiment to determine whether AVL tree really do      " + wspace8);
        System.out.println(wspace8 + "balance and provide good performance irrespective of    " + wspace8);
        System.out.println(wspace8 + "the order of the data.                                  " + wspace8);
        System.out.println(wspace8 + "The data file vaccinations.csv is a listing of country  " + wspace8);
        System.out.println(wspace8 + "names, dates, and vaccination numbers. There are 9919   " + wspace8);
        System.out.println(wspace8 + "entries in the subset used for the assignment,          " + wspace8);
        System.out.println(wspace8 + "corresponding to data for 2022 only.                    " + wspace8);
        System.out.println();
        System.out.println(wspace8 + "The Java application AVLExperiment:                     " + wspace8);
        System.out.println(wspace8 + "       - creates a version of the data file with X      " + wspace8);
        System.out.println(wspace8 + "         amount of randomsation (where 0<=X<=20 is      " + wspace8);
        System.out.println(wspace8 + "         specified as a command-line parameter).        " + wspace8);
        System.out.println(wspace8 + "       - Loads the data into an AVL tree (counting the  " + wspace8);
        System.out.println(wspace8 + "         number of insertion-related comparisons for    " + wspace8);
        System.out.println(wspace8 + "         each iterm added).                             " + wspace8);
        System.out.println(wspace8 + "       - Search for each data item (counting the number " + wspace8);
        System.out.println(wspace8 + "         of find-related comparisons for each item      " + wspace8);
        System.out.println(wspace8 + "         searched for).                                 " + wspace8);
        System.out.println();
        System.out.println();
        for (int b = 0; b < 24*3;b++) {
            System.out.print(bar);
        }
        System.out.println();
        for (int s = 0; s < 24*3;s++) {
            System.out.print(star);
        }
        System.out.println();
        for (int b = 0; b < 24*3;b++) {
            System.out.print(bar);
        }
        System.out.println();
    }
    
    /**
      * Prints out bottom stars and dashes for appearance.
      */
    static void footer() {
        
        String star = "*", bar ="-", wspace24 ="                        ", wspace8 = "        ";
    
        System.out.println();
        for (int b = 0; b < 24*3;b++) {
            System.out.print(bar);
        }
        System.out.println();
        for (int s = 0; s < 24*3;s++) {
            System.out.print(star);
        }
        System.out.println();
        for (int b = 0; b < 24*3;b++) {
            System.out.print(bar);
        }
        System.out.println();
    }
}
