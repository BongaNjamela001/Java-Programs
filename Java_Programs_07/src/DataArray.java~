package models;
import avltree.AVLTree;
import java.io.*;
import java.util.*;

/**
  * <h1> Data Array <h1>
  * Loads data from vaccine file into an array to allow for randomization. Data is randomized in clusters
  * whose sizes are determined by the user. Writes out the randomized data to a file name 
  * "vaccine[clustersize]".
  * @author Bonga Njamela
  * @since 25-03-22
  * @version 1.0
  */

public class DataArray {
    
    public static String file;//file name
    public static String[] dataArray;//each line in data is stored here
    public int clusterSize;//randomization cluster size
        
    /**
      * Empty DataArray constructor. 
      */
    public DataArray() {
        dataArray = new String[9919];
        clusterSize = 0;
        file = " ";
    } 
    
    /**
      * DataArray constructor that takes in the file name from which data is retrieved line by line.
      */
    public DataArray(String fileName) {
        file = fileName;
        dataArray = new String[totalLines(fileName)];
        clusterSize = 0;
    }
    
    /**
      * Determines the number of lines in the data file to programmatically determine the array size.
      * @return int - The total lines in the data file
      */
    public static int totalLines(String fileName) {
        
        int lineCount = 0;
        String line = " ";
        
        try (BufferedReader bf = new BufferedReader(new FileReader(new File(fileName)))){
            while(line != null) {
                line = bf.readLine();
                if (line != null) {
                    lineCount++;
                }
                else {
                    continue;
                }
            }
            bf.close();
        }
        catch (FileNotFoundException e) {
            System.out.println("File not found");//
            e.printStackTrace();
            System.exit(0);
        }
        catch (IOException ioe){
            ioe.printStackTrace();
            System.exit(0);
        }
        return lineCount;
    }
    
    /**
      * Generate the String array counting each line in the file as array entries.
      */
    public static void createArray() {
        
        String line = " ";
        int index = 0;
        try (BufferedReader bf = new BufferedReader(new FileReader(new File(file)))){
            while(line != null) {
                line = bf.readLine();
                if (line != null) {
                    dataArray[index] = line;
                }
                else {
                    continue;
                }
                index++;
            }
            bf.close();
        }
        catch (FileNotFoundException e) {
            System.out.println("File not found");//
            e.printStackTrace();
            System.exit(0);
        }
        catch (IOException ioe){
            ioe.printStackTrace();
            System.exit(0);
        }
    }
    
    /**
      * <p>Randomizes the data in the array according to the user defined cluster size. Chooses index to begin
      * array randomisation using pseudo-random number. The pairs of items in the cluster are swapped randomly.
      * New, randomised data is save to file.
      * </p>
      * @param seed The required cluster size to seed the randomisation.
      */
    public static void randomise(int seed) {
        Random rand = new Random();
        int upperbound = totalLines(file);
        int randIndex0 = 0, randIndex1 = 0;
        int count = seed;
        String line;
        String tempData = "";//stores the array item at some random index 
        
            if (seed != 0) {
                do{
                    randIndex0 = rand.nextInt(upperbound);
                    randIndex1 = rand.nextInt(upperbound);
                    tempData = dataArray[randIndex0];//pop data out of array
                    
                    if (randIndex1 != randIndex0) {
                        if (dataArray[randIndex1] != null) {
                            dataArray[randIndex0] = dataArray[randIndex1];
                            dataArray[randIndex1] = tempData;
                        }
                    }
                    count=count-1;
                }while(count > 0);
            }
            else {
                return;
            }

            try (FileWriter wr = new FileWriter("vaccines" + seed + ".txt")) {
                for (int i = 0; i < dataArray.length; i++) {                    
                    if (i == (dataArray.length - 1)) {
                        line = dataArray[i];
                    }
                    else  {
                        line = dataArray[i] + "\n";
                    }
                    wr.write(line);
                }
                wr.close();
            }
            catch (FileNotFoundException e) {
                System.out.println("Failed to generate file.");
                System.exit(0);
            }
            catch (IOException ioe) {
                ioe.printStackTrace();
                System.exit(0);
            }
    }
}
